*** GIT & GITHUB ***

amigoscode.com

supprimer tous les fichiers d'un répertoire-dépôt en attente de commit :
>> git rm -r --cached .

ajouter tous les fichiers du répertoire-dépôt à la file de commitage (staged) :
>> git add .
>> git add -A (avec remontée d'un sous-répertoire au répertoire principal)

vérifier le contenu du dossier-répertoire courant :
>> git status

commiter un fichier :
>> git commit -m "libellé" nomFichier
(libellé : nomProjet, nomFichier, modificationsContenues, etc.)

contrôler les modification d'un fichier commité :
>> git log
>> git show d7e1a4cd041c3db3b19eacd355c33953ff4c9b3e

afficher les modifications d'un fichier avant staging et commiting :
>> get diff

supprimer les dernières modifications d'un fichier :
>> git restore nomFichier

modifier le libellé d'un fichier commited :
>> git commit --amend -m "nouveauLibellé" nomFichier

établir un lien entre le repository GitHub et le repository local :
>> git remote add origin https://github.com/jmAmar/learning-Git.git
>> git branch -M main

initialiser la sauvegarde de fichiers commited sur le depository du serveur GitHub :
>> git push -u origin main

sauvegarder les fichier du repository local vers le repository GitHub :
>> git push .


rappatrier un fichier commited du repository GitHub dans le repository local :
>> git pull
(rappatrie tous les les fichiers modifiés dans GitHub et commited)


Une branch est une ligne indépendante de développement
la branch par défaut ou principale est appelée main (master dans les versions antérieures)
une branch annexe peut être intégrée (merged) dans la branche main

identifier la branch sur laquelle on travaille en local :
>> git branch
identifier la branch sur laquelle on travaille sur GitHub :
>> git branch -r  (remote)
identifier toutes branch sur laquelle on travaille en local et sur GitHub :
>> git branch -a  (all)

créer une branch annexe :
>> git branch annexe1

créer une branche annexe et s'y positionner :
>> git branch -b annexe2

Changer de branch de travail :
>> git checkout annexe1

revenir à la branch précédente (main par exemple) :
>> git checkout -

supprimer une branch :
>> git branch -d nomBranch

